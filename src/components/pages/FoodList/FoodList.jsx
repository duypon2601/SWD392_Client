import {
  Button,
  Form,
  Input,
  Modal,
  Table,
  Layout,
  message,
  Select,
  Popconfirm,
} from "antd";
import { useForm } from "antd/es/form/Form";
import React, { useState, useEffect } from "react";
import api from "../../config/axios";

const { Content } = Layout;
const { Option } = Select;

function FoodList() {
  const [form] = useForm();
  const [visible, setVisible] = useState(false);
  const [dataSource, setDataSource] = useState([]);
  const [categories, setCategories] = useState([]); // ‚úÖ State l∆∞u danh m·ª•c

  // üõ† L·∫•y danh s√°ch m√≥n ƒÉn & danh m·ª•c khi component mount
  useEffect(() => {
    fetchFoods();
    fetchCategories();
  }, []);

  // üõ† L·∫•y danh s√°ch m√≥n ƒÉn
  const fetchFoods = async () => {
    try {
      const response = await api.get("/food");
      if (response.data.statusCode === 200 && response.data.data) {
        setDataSource(response.data.data);
      } else {
        message.error(
          response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√≥n ƒÉn"
        );
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch m√≥n ƒÉn:", error);
      message.error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√≥n ƒÉn");
    }
  };

  const fetchCategories = async () => {
    try {
      const res = await api.get("/category");
      if (res.data.statusCode === 200 && res.data.data) {
        setCategories(res.data.data);
      } else {
        message.error(res.data.message || "Kh√¥ng th·ªÉ l·∫•y danh m·ª•c");
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh m·ª•c:", error);
      message.error("Kh√¥ng th·ªÉ l·∫•y danh m·ª•c");
    }
  };

  // üõ† Th√™m m√≥n m·ªõi v√†o API
  const handleSubmit = async (values) => {
    await form.validateFields();
    try {
      const newFood = {
        food_id: 0,
        name: values.name,
        description: values.description,
        image_url: values.image_url || null,
        category_id: values.category_id,
        status: "AVAILABLE",
      };

      const response = await api.post("/food", newFood, {
        headers: { "Content-Type": "application/json" },
      });

      if (response.data.statusCode === 200) {
        setDataSource([...dataSource, response.data.data]);
        setVisible(false);
        form.resetFields();
        message.success("Th√™m m√≥n ƒÉn th√†nh c√¥ng!");
        alert("Th√™m m√≥n ƒÉn th√†nh c√¥ng!");
      } else {
        message.error(response.data.message || "Kh√¥ng th·ªÉ th√™m m√≥n ƒÉn");
      }
    } catch (error) {
      console.error("L·ªói khi th√™m m√≥n ƒÉn:", error);
      message.error("Kh√¥ng th·ªÉ th√™m m√≥n ƒÉn");
    }
  };

  // üõ† X√≥a m√≥n ƒÉn
  const handleDelete = async (food_id) => {
    try {
      await api.delete(`/food/${food_id}`);
      setDataSource(dataSource.filter((item) => item.food_id !== food_id));
      alert("X√≥a m√≥n ƒÉn th√†nh c√¥ng!");
      fetchFoods(); // c·∫≠p nh·∫≠p l·∫°i m√≥n ƒÉn
    } catch (error) {
      console.error("L·ªói khi x√≥a m√≥n ƒÉn:", error);
      message.error("Kh√¥ng th·ªÉ x√≥a m√≥n ƒÉn");
    }
  };

  return (
    <Layout>
      <Content style={{ padding: "20px", background: "#fff", flex: 1 }}>
        <h1>C√°c m√≥n ƒÉn c·ªßa qu√°n</h1>
        <Button type="primary" onClick={() => setVisible(true)}>
          Th√™m m√≥n
        </Button>
        <Table
          dataSource={dataSource}
          columns={[
            { title: "T√™n m√≥n", dataIndex: "name", key: "name" },
            { title: "M√¥ t·∫£", dataIndex: "description", key: "description" },
            {
              title: "H√¨nh ·∫£nh",
              dataIndex: "image_url",
              key: "image_url",
              render: (image_url) =>
                image_url ? (
                  <img
                    src={image_url}
                    alt="H√¨nh m√≥n ƒÉn"
                    style={{ width: 50 }}
                  />
                ) : (
                  "Kh√¥ng c√≥ ·∫£nh"
                ),
            },
            { title: "Danh m·ª•c", dataIndex: "category_id", key: "category_id" },
            { title: "Tr·∫°ng th√°i", dataIndex: "status", key: "status" },
            {
              title: "H√†nh ƒë·ªông",
              key: "action",
              render: (_, record) => (
                <Popconfirm
                  title="X√≥a m√≥n ƒÉn"
                  description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n ƒÉn n√†y kh√¥ng?"
                  onConfirm={() => handleDelete(record.food_id)}
                >
                  <Button type="primary" danger>
                    X√≥a
                  </Button>
                </Popconfirm>
              ),
            },
          ]}
          rowKey="food_id"
        />

        <Modal
          title="Th√™m m√≥n ƒÉn"
          open={visible}
          onCancel={() => setVisible(false)}
          onOk={() => form.submit()}
        >
          <Form form={form} onFinish={handleSubmit}>
            <Form.Item
              name="name"
              label="T√™n m√≥n ƒÉn"
              rules={[{ required: true, message: "L√†m ∆°n h√£y nh·∫≠p t√™n m√≥n" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item
              name="description"
              label="M√¥ t·∫£"
              rules={[{ required: true, message: "L√†m ∆°n h√£y nh·∫≠p m√¥ t·∫£" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item name="image_url" label="H√¨nh ·∫£nh">
              <Input placeholder="Nh·∫≠p URL h√¨nh ·∫£nh" />
            </Form.Item>
            <Form.Item
              name="category_id"
              label="Danh m·ª•c"
              rules={[{ required: true, message: "L√†m ∆°n h√£y ch·ªçn danh m·ª•c" }]}
            >
              <Select placeholder="Ch·ªçn danh m·ª•c">
                {categories.map((category) => (
                  <Select.Option
                    key={category.category_id}
                    value={category.category_id}
                  >
                    {category.name}
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
          </Form>
        </Modal>
      </Content>
    </Layout>
  );
}

export default FoodList;
